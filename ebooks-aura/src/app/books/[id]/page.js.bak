/**
 * Book page - Server Component
 * This component handles static site generation parameters
 * and delegates rendering to the client component
 */

import { Suspense } from 'react';
import { default as DynamicImport } from 'next/dynamic';
import BookPageClient from './BookClientWrapper';
import STATIC_BOOKS from '../../utils/STATIC_BOOKS';
import Script from 'next/script';

// Configure rendering for this page - using 'auto' instead of 'force-dynamic' for static exports
// export const dynamic = 'force-dynamic';

// For static exports, we cannot use dynamicParams
// export const dynamicParams = true;

// Set revalidation time for static pages (in seconds)
export const revalidate = 3600;

// Define default metadata for the book page (used internally only)
const defaultMetadata = {
  title: 'Book Details - EbookAura',
  description: 'View book details, read and download PDFs',
};

// Dynamic metadata generation for social media previews
export async function generateMetadata(props) {
  // Properly await the params object before accessing properties
  const params = await Promise.resolve(props.params);

  try {
    const id = params?.id;
    if (!id || id === 'not-found') {
      return defaultMetadata;
    }

    // Get the API URL with localhost fallback
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
    const siteUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://ebookaura.onrender.com';
    
    // Fetch book details for metadata
    const response = await fetch(`${apiUrl}/books/${id}`, {
      next: { revalidate: 3600 }, // Revalidate cache every hour
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch book: ${response.status}`);
    }
    
    const book = await response.json();

    // Format the file size
    const formatFileSize = (sizeInBytes) => {
      if (!sizeInBytes) return 'Unknown size';
      
      const kb = sizeInBytes / 1024;
      if (kb < 1024) {
        return `${Math.round(kb * 10) / 10} KB`;
      }
      const mb = kb / 1024;
      return `${Math.round(mb * 10) / 10} MB`;
    };

    // Get the book cover URL (ensure it's an absolute URL)
    const coverUrl = book.coverImage && book.coverImage.startsWith('http')
      ? book.coverImage
      : `${siteUrl}${book.coverImage && book.coverImage.startsWith('/') ? '' : '/'}${book.coverImage || '/images/default-cover.jpg'}`;

    // Create description with book details
    const description = `${book.title || 'Book'} by ${book.author || 'Unknown Author'}. ${book.description ? book.description.substring(0, 150) + '...' : ''} Format: PDF, Size: ${formatFileSize(book.fileSize)}, Rating: ${book.averageRating ? book.averageRating.toFixed(1) + '/5' : 'Not rated'}`;

    return {
      title: `${book.title || 'Book'} by ${book.author || 'Unknown Author'} - EbookAura`,
      description,
      keywords: `${book.title}, ${book.author}, ${book.categories?.join(', ') || ''}, PDF, ebook, free book, read online, download pdf, ebookaura`,
      openGraph: {
        title: `${book.title || 'Book'} by ${book.author || 'Unknown Author'}`,
        description,
        url: `${siteUrl}/books/${id}`,
        siteName: 'EbookAura',
        images: [
          {
            url: coverUrl,
            width: 600,
            height: 900,
            alt: `Cover of ${book.title || 'book'}`,
          },
        ],
        locale: 'en_US',
        type: 'book',
        book: {
          authors: [book.author || 'Unknown Author'],
          isbn: book.isbn || '',
          releaseDate: book.publicationDate || '',
        },
      },
      twitter: {
        card: 'summary_large_image',
        title: `${book.title || 'Book'} by ${book.author || 'Unknown Author'}`,
        description,
        images: [coverUrl],
      },
      other: {
        'book:author': book.author || 'Unknown Author',
        'book:isbn': book.isbn || '',
        'book:page_count': book.pageCount || '',
        'book:release_date': book.publicationDate || '',
        'og:price:amount': book.price || '0',
        'og:price:currency': 'Coins',
      },
    };
  } catch (error) {
    console.error('Error generating book metadata:', error);
    return defaultMetadata;
  }
}

// Fix the getBookStructuredData function to properly handle params
async function getBookStructuredData(params) {
  try {
    const id = params?.id ? String(params.id) : null;
    if (!id || id === 'not-found') {
      return null;
    }

    // Get the API URL with localhost fallback
    const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:5000/api';
    const siteUrl = process.env.NEXT_PUBLIC_APP_URL || 'https://ebookaura.onrender.com';
    
    // Fetch book details
    const response = await fetch(`${apiUrl}/books/${id}`, {
      next: { revalidate: 3600 }, // Revalidate cache every hour
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (!response.ok) {
      throw new Error(`Failed to fetch book: ${response.status}`);
    }
    
    const book = await response.json();

    // Get the book cover URL (ensure it's an absolute URL)
    const coverUrl = book.coverImage && book.coverImage.startsWith('http')
      ? book.coverImage
      : `${siteUrl}${book.coverImage && book.coverImage.startsWith('/') ? '' : '/'}${book.coverImage || '/images/default-cover.jpg'}`;

    // Format publication date if available
    const publicationDate = book.publicationDate ? new Date(book.publicationDate).toISOString().split('T')[0] : undefined;

    // Build structured data for search engines
    const structuredData = {
      "@context": "https://schema.org",
      "@type": "Book",
      "name": book.title,
      "author": {
        "@type": "Person",
        "name": book.author || "Unknown Author"
      },
      "url": `${siteUrl}/books/${id}`,
      "workExample": {
        "@type": "Book",
        "bookFormat": "http://schema.org/EBook",
        "potentialAction": {
          "@type": "ReadAction",
          "target": `${siteUrl}/books/${id}`
        }
      },
      "image": coverUrl,
      "description": book.description || `Read ${book.title} by ${book.author} online at EbookAura.`
    };

    // Add optional fields if available
    if (book.isbn) structuredData.isbn = book.isbn;
    if (publicationDate) structuredData.datePublished = publicationDate;
    if (book.publisher) structuredData.publisher = { "@type": "Organization", "name": book.publisher };
    if (book.pageCount) structuredData.numberOfPages = book.pageCount;
    if (book.language) structuredData.inLanguage = book.language;
    if (book.categories && book.categories.length) structuredData.genre = book.categories[0];
    if (book.averageRating) {
      structuredData.aggregateRating = {
        "@type": "AggregateRating",
        "ratingValue": book.averageRating,
        "bestRating": "5",
        "worstRating": "1",
        "ratingCount": book.ratingCount || 1
      };
    }

    // Add offers data for free book
    structuredData.offers = {
      "@type": "Offer",
      "availability": "http://schema.org/InStock",
      "price": book.price || "0",
      "priceCurrency": "USD",
      "url": `${siteUrl}/books/${id}`
    };

    return structuredData;
  } catch (error) {
    console.error('Error generating book structured data:', error);
    return null;
  }
}

// Server Component using proper params handling for Next.js 13+
export default async function BookPage({ params }) {
  // Get structured data for the book
  const structuredData = await getBookStructuredData(params);
  
  return (
    <>
      {/* Add structured data for search engines */}
      {structuredData && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(structuredData) }}
        />
      )}
      
      <Suspense fallback={<div className="loading">Loading book...</div>}>
        <BookPageClient params={params} />
      </Suspense>
    </>
  );
}

export async function generateStaticParams() {
  try {
    console.log("Generating static book pages...");
    
    // Import STATIC_BOOKS and ensure it's available
    let STATIC_BOOKS = [];
    try {
      STATIC_BOOKS = (await import('@/app/utils/STATIC_BOOKS')).default;
      console.log(`Added ${STATIC_BOOKS.length} books from STATIC_BOOKS list`);
    } catch (error) {
      console.warn("No STATIC_BOOKS.js file found or error importing:", error.message);
      // Create a fallback list of critical IDs if import fails
      STATIC_BOOKS = [
        '681859bd560ce1fd792c2745', // Critical - previously problematic ID
        '6807c9d24fb1873f72080fb1',
        '6807be6cf05cdd8f4bdf933c', 
        '6803d0c8cd7950184b1e8cf3',
        '680735665ceba10744914991'
      ];
      console.log(`Using fallback list of ${STATIC_BOOKS.length} critical book IDs`);
    }
    
    // Try to fetch additional books from the API if available
    const API_URL = process.env.NEXT_PUBLIC_API_URL || 'https://ebookaura.onrender.com/api';
    console.log(`Fetching books from API: ${API_URL}/books?limit=200`);
    
    let apiBooks = [];
    try {
      const response = await fetch(`${API_URL}/books?limit=200`);
      if (response.ok) {
        const data = await response.json();
        if (data.books && Array.isArray(data.books)) {
          apiBooks = data.books.map(book => book.id || book._id);
          console.log(`Added ${apiBooks.length} books from API (object format)`);
        }
      } else {
        console.warn(`API request failed with status: ${response.status}`);
      }
    } catch (error) {
      console.warn("Failed to fetch books from API:", error.message);
    }
    
    // Always explicitly include critical IDs that must be generated
    const bookIdMap = new Map();
    
    // Add all STATIC_BOOKS first
    STATIC_BOOKS.forEach(id => {
      bookIdMap.set(id, { id, source: 'static-books' });
    });

    // Add API books if any were fetched
    apiBooks.forEach(id => {
      if (!bookIdMap.has(id)) {
        bookIdMap.set(id, { id, source: 'api' });
      }
    });

    // Explicitly add critical IDs that must be included regardless
    const CRITICAL_IDS = [
      '681859bd560ce1fd792c2745', // Previously problematic ID
      '6807c9d24fb1873f72080fb1',
      '6807be6cf05cdd8f4bdf933c',
      '6803d0c8cd7950184b1e8cf3',
      '680735665ceba10744914991'
    ];
    
    CRITICAL_IDS.forEach(id => {
      if (!bookIdMap.has(id)) {
        bookIdMap.set(id, { id, source: 'critical-explicit' });
        console.log(`Added critical book ID: ${id}`);
      }
    });

    // Always include a catch-all "not-found" page
    bookIdMap.set('not-found', { id: 'not-found', source: 'catch-all' });

    // Convert map to array of params objects
    const bookIds = Array.from(bookIdMap.values()).map(entry => ({ id: entry.id }));
    
    console.log(`Generated static params for ${bookIds.length} book pages`);
    console.log(`All book IDs: ${bookIds.map(b => b.id).join(', ')}`);
    
    return bookIds;
  } catch (error) {
    console.error("Error generating static book paths:", error);
    // Fallback to just the critical IDs if something goes wrong
    return [
      { id: '681859bd560ce1fd792c2745' },
      { id: '6807c9d24fb1873f72080fb1' },
      { id: '6807be6cf05cdd8f4bdf933c' },
      { id: '6803d0c8cd7950184b1e8cf3' },
      { id: '680735665ceba10744914991' },
      { id: 'not-found' }
    ];
  }
} 